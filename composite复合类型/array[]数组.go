package main

import "fmt"

/*	1) 数组 :
		数组是指: 同一类型的元素集合,元素的数量就是数组的长度,长度为固定值(常量)
   操作数组	:
数组的元素可以通过下标[int]的方式访问,从0到len()-1 如: 4个下标为 0,1,2,3
	传递数组 :
当传递数组作为函数参数时只传递值副本, 传递数组指针时,才传递指针*/

func main(){
	//标准格式 :
	var a [3]int // =[3]int{1,2,3}
	a[0] = 1
	a[1] = 2
	a[2] = 3
	//自动推导类型 :
	b := [3]int{4,5,6}
	/* 部分初始化 :
	没有初始化的下标默认为 0	*/
	c := [4]int{7,8,9}	//第 4个下标[3]没有初始化,默认为0
	fmt.Printf("a=%v\nb=%v\nc=%v\n",a,b,c)	//打印
	// 多个下标值 赋值或 修改 :
	c = [4]int{0:7,1:7,2:7,3:7}
	fmt.Printf("修改后c=%v\n",c)
	/* 2) 多维数组(数组集合) :
	二维格式:	  [x] [y]  x:行 y:长度						*/
	d := [2][3]int{{1,2,3}, {4,5,6}} //定义了一个 2 行,长度为 3 的数组
	fmt.Printf("d=%v\n",d)  // 打印
	//操作(行也是从0开始)	:
	d =[2][3]int{0:{3,2,1},1:{3,2,1}}		   //修改第二行小组的值(同样可用于指定位置初始化)
	fmt.Printf("d=%v\n",d)  // 打印
	// 3) 数组的比较和赋值 :
	//同样类型的数组可以直接进行比较和赋值操作 :
	//比较 :
	println(a==b) //false
	//赋值 :
	a = b
	println(a==b) //true
}